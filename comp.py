import numpy as np
import os
from math import sin, pi


# Calculates power consumption per 100 ticks (1 day)
tick = 1
power = 0
while tick < 101:
    power += (50 * sin((2*pi/100) * tick)) + (50 * sin((4*pi/100) * tick)) + 120
    tick += 1

#path = input("Enter data path: ")

#arr = np.loadtxt(path + "/output.txt" , dtype=list)

#arr = (np.loadtxt("/home/mehsan/Desktop/comp/output.txt", dtype = list))

    
#the following commented out line of code gives us the average sun exposure over all points in the grid
#avg = arr.mean(axis=(0,1))

#since it takes a long time to calculate this value for berevity we have compiled the total time needed for one tick and used that as the 
#average sun exposure for a day


sun_exp = np.loadtxt("np_output40.txt")


# Get the indices for the largest `num_largest` values.
num_largest = 4000

indices = (-sun_exp).argpartition(num_largest, axis=None)[:num_largest]


x, y = np.unravel_index(indices, sun_exp.shape)


coords = np.column_stack((x, y))
print("Most sunny values:", np.sort(sun_exp, axis=None)[-num_largest:])
print("Most sunny cordinates:" + str(coords))

#Total energy generated by 4000 solar panels

energy = 4 * np.sort(sun_exp, axis=None)[-num_largest:]

energy = energy.flatten()
panel_eng = sum(energy) * 0.9

bat_eng = power - panel_eng

n = bat_eng / 10

totalbattery = (bat_eng * ((0.05 * n) + 0.06 + 0.03 * (5 - tick/100)))

finalcost = (0.03 * num_largest) + (0.05 * n)

print("Total power required for 1 day:" + str(power) + " KW/Tick" )
print("Total power generated by 4000 solar panels: "+ str(panel_eng) + " KW/Tick" )
print("Total power generated by battery required for 1 day:" + str(bat_eng) + " KW/Tick")
print("Total overall maintanance cost: " + str(finalcost)+" dollars/Tick")



